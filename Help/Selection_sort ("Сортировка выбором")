#include<iostream>
#include<ctime>

using namespace std;

int* give_memory(int*, int);
int* free_memory(int*);
void init_array(int*, int);
void print_array(int*, int, char);
void selection_sort(int*, int);

int main() // динамическая память
{
	setlocale(LC_ALL, "Russian");
	srand((unsigned)time(0));
	int* A = NULL, size;
	cout << "Введите размер массива = ";
	cin >> size;
	cout << endl;

	A = give_memory(A, size);

	init_array(A, size);
	cout << "Исходный массив:\n";
	print_array(A, size, 'A');
	cout << endl;

	selection_sort(A, size);
	cout << "Отсортированный массив с помощью сортировки выбором:\n";
	print_array(A, size, 'B');
	cout << endl;

	A = free_memory(A);
	return 0;
}

int* give_memory(int *A, int size) // заполнение памяти
{
	A = (int*)malloc(size * sizeof(int));
	return A;
}

int* free_memory(int* A) // освобождение памяти
{
	free(A);
	A = NULL;
	return A;
}

void init_array(int* A, int size) // Функция инициализации динамического массива
{
	for (int *i = A; i < A + size; i++)
	{
		*i = rand() % 100;
	}
}

void print_array(int* A, int size, char simvol) // Функция печати динамического массива
{
	for (int i = 0; i < size; i++)
	{
		cout << simvol << "[" << i << "] = " << *(A + i) << "\n";
	}
}

void selection_sort(int* A, int size) // сортировка выбором
{
	for (int i = 0; i < size; i++)
	{
		int temp = A[i];
		int min = A[i], imin = i;
		for (int j = i + 1; j < size; j++)
		{
			if (A[j] < min)
			{
				min = A[j];
				imin = j;
			}
		}
		A[i] = min;
		A[imin] = temp;
	}
}
