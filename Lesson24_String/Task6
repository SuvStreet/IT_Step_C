// В строке все вхождения подстроки str1 заменить подстрокой str2. Str2 вводится с клавиатуры.

#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <cstring>

using namespace std;

int main()
{
	setlocale(LC_ALL, "Russian");

	char text[1000]; // инициализация предложения
	char sBuf[1000]; // инициализация буфера(нашей последующей копии предложения)
	char str1[32]; // первая подстрока, то что мы хотим заменить
	char str2[32]; // вторая подстрока, то  на что мы хотим заменить
	long sLen; // длина предложения в байтах(количество символов используемых впредложении)
	long sPos; // положение указателя перед началом схожести с символом первой подстроки

	cout << "Введите предложение (не более 1000 символов): ";
	setlocale(LC_ALL, ".866");
	cin.getline(text, 1000);

	setlocale(LC_ALL, "Russian");
	cout << "Введите что вы хотите заменить (не более 32 символов): ";
	setlocale(LC_ALL, ".866");
	cin.getline(str1, 32);

	setlocale(LC_ALL, "Russian");
	cout << "Введите на что вы хотите заменить (не более 32 символов): ";
	setlocale(LC_ALL, ".866");
	cin.getline(str2, 32);

	char* s = strstr(text, str1); // ищем сходства в предложении с первой подстрокой
	while (s)
	{
		sLen = strlen(text); // определяем длинну нашего предложения
		sPos = sLen - strlen(s); // перестовляем указатель на начало сходства нашей первой подстроки в предложении
		strcpy(sBuf, s + strlen(str1)); // копируем остаток предложения оставшиеся за первой подстрокой
		text[sPos] = '\0'; // удаляем всё что идёт после первой подстроки, в том числе и саму первую подстроку
		strcat(text, str2); // объединяем вторую подстроку с текстом который шёл до начало первой подстроки
		strcat(text, sBuf); // объединяем предложение с тем что осталось после замены первой подстроки
		s = strstr(text, str1); // продолжаем искать сходства в предложении с первой подстрокой и если находим повторяем цикл
	}

	setlocale(LC_ALL, "Russian");
	cout << "Ваше предложение после замены:	'";
	setlocale(LC_ALL, ".866");
	cout << text << "'\n\n";

	return 0;
}
